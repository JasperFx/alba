import{_ as n,c as s,o as a,a as t}from"./app.bb080ae4.js";var e="/alba/assets/ClassDiagram.drawio.4e6d0bc2.png";const g='{"title":"Alba Setup","description":"","frontmatter":{},"headers":[{"level":2,"title":"Initializing AlbaHost with IHostBuilder","slug":"initializing-albahost-with-ihostbuilder"},{"level":2,"title":"Initializing AlbaHost with WebApplicationFactory","slug":"initializing-albahost-with-webapplicationfactory"},{"level":2,"title":"Running a Scenario","slug":"running-a-scenario"},{"level":2,"title":"Customizing the System for Testing","slug":"customizing-the-system-for-testing"}],"relativePath":"guide/hosting.md","lastUpdated":1644418893183}',o={},p=t('<h1 id="alba-setup" tabindex="-1">Alba Setup <a class="header-anchor" href="#alba-setup" aria-hidden="true">#</a></h1><p>To get started with Alba, just add a Nuget reference to the Alba library to your testing project that should also be referencing the ASP.Net Core project that you&#39;re going to be testing. When using Alba, you actually bootstrap your web application in memory using either the &quot;older&quot; <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.hostbuilder?view=dotnet-plat-ext-6.0" target="_blank" rel="noopener noreferrer">HostBuilder model</a> or the newer <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.testing.webapplicationfactory-1?view=aspnetcore-6.0" target="_blank" rel="noopener noreferrer">WebApplicationFactory</a> model , then pass the root <code>IHost</code> of the running application to Alba&#39;s <code>AlbaHost</code>, which will be the entry point to using Alba in all of your integration tests.</p><p><code>AlbaHost</code> is shown in the class diagram below:</p><p><img src="'+e+`" alt="AlbaHost Class Diagram"></p><p><code>AlbaHost</code> implements the ASP.Net Core <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.ihost?view=dotnet-plat-ext-6.0" target="_blank" rel="noopener noreferrer">IHost</a> interface for convenience and familiarity. Internally it is tracking the actual <code>IHost</code> for your application running in memory as well as an instance of the ASP.Net Core <a href="https://docs.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-6.0" target="_blank" rel="noopener noreferrer">TestServer</a> that will actually be used to execute HTTP requests against the application in memory.</p><p>In the following sections I&#39;ll show you how to bootstrap your ASP.Net Core system with Alba and start authoring specifications with the <code>AlbaHost</code> type.</p><h2 id="initializing-albahost-with-ihostbuilder" tabindex="-1">Initializing AlbaHost with IHostBuilder <a class="header-anchor" href="#initializing-albahost-with-ihostbuilder" aria-hidden="true">#</a></h2><p>To bootstrap a <strong>ASP.NET Core 5</strong> application, create a <code>AlbaHost</code> using the definition of your <code>IHostBuilder</code> as shown below:</p><p><a id="snippet-sample_quickstart3"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">build_host_from_Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    
<span class="token punctuation">{</span>
    <span class="token comment">// Bootstrap your application just as your real application does</span>
    <span class="token class-name"><span class="token keyword">var</span></span> hostBuilder <span class="token operator">=</span> Program<span class="token punctuation">.</span><span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AlbaHost</span><span class="token punctuation">(</span>hostBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Just as a sample, I&#39;ll run a scenario against</span>
    <span class="token comment">// a &quot;hello, world&quot; application&#39;s root url</span>
    <span class="token keyword">await</span> host<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        s<span class="token punctuation">.</span>Get<span class="token punctuation">.</span><span class="token function">Url</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">ContentShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/Quickstart3.cs#L15-L32" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_quickstart3" title="Start of snippet">anchor</a></sup></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>There are both synchronous and asynchronous methods to bootstrap an <code>AlbaHost</code>. Depending on your test harness, I recommend using the asynchronous version whenever applicable.</p></div><p>Or alternatively, you can use one of the Alba extension methods off of <code>IHostBuilder</code> to start an <code>AlbaHost</code> object in a fluent interface style:</p><p><a id="snippet-sample_shorthand_bootstrapping"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">fluent_interface_bootstrapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">await</span> Program
        <span class="token punctuation">.</span><span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">StartAlbaAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Just as a sample, I&#39;ll run a scenario against</span>
    <span class="token comment">// a &quot;hello, world&quot; application&#39;s root url</span>
    <span class="token keyword">await</span> host<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        s<span class="token punctuation">.</span>Get<span class="token punctuation">.</span><span class="token function">Url</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">ContentShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/Quickstart3.cs#L35-L51" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_shorthand_bootstrapping" title="Start of snippet">anchor</a></sup></p><p>The <code>AlbaHost</code> is an extension of the standard .Net Core <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.ihost?view=dotnet-plat-ext-5.0" target="_blank" rel="noopener noreferrer">IHost</a> interface with a few additions for testing support. While you can always access the underlying <code>TestServer</code> through the <code>IAlbaHost.Server</code> property, you&#39;re mostly going to be using the <code>Scenario()</code> method to write Alba &quot;Scenario&quot; tests.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To make the samples in this page easier to follow, I&#39;m bootstrapping the <code>IAlbaHost</code> within each test. In real usage, bootstrapping your application is expensive and you will probably want to reuse the <code>IAlbaHost</code> between tests. See the integrations with NUnit and xUnit.Net for examples.</p></div><h2 id="initializing-albahost-with-webapplicationfactory" tabindex="-1">Initializing AlbaHost with WebApplicationFactory <a class="header-anchor" href="#initializing-albahost-with-webapplicationfactory" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>This functionality was added in Alba 6.0 and is only supported in .Net 6+.</p></div><p>For <strong>ASP.NET Core 6</strong>, Microsoft introduced a new mechanism for configuring and bootstrapping web applications using <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.webapplicationbuilder?view=aspnetcore-6.0" target="_blank" rel="noopener noreferrer">WebApplicationBuilder</a>.</p><p>As an example, consider this very small ASP.Net Core application utilizing the new <a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/min-web-api?view=aspnetcore-6.0&amp;tabs=visual-studio" target="_blank" rel="noopener noreferrer">Minimal API</a> approach:</p><p><a id="snippet-sample_minimal_web_api"></a></p><div class="language-cs"><pre><code><span class="token keyword">using</span> <span class="token namespace">System</span><span class="token punctuation">;</span>
<span class="token keyword">using</span> <span class="token namespace">Microsoft<span class="token punctuation">.</span>AspNetCore<span class="token punctuation">.</span>Builder</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> WebApplication<span class="token punctuation">.</span><span class="token function">CreateBuilder</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add services to the container.</span>

<span class="token class-name"><span class="token keyword">var</span></span> app <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">Build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Configure the HTTP request pipeline.</span>

app<span class="token punctuation">.</span><span class="token function">UseHttpsRedirection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">MapGet</span><span class="token punctuation">(</span><span class="token string">&quot;/blowup&quot;</span><span class="token punctuation">,</span> context <span class="token operator">=&gt;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;Boo!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/WebApiNet6/Program.cs#L1-L22" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_minimal_web_api" title="Start of snippet">anchor</a></sup></p><p>Using this project configuration mechanism, Alba is still usable, but this time we need to utilize ASP.Net Core&#39;s <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.testing.webapplicationfactory-1?view=aspnetcore-6.0" target="_blank" rel="noopener noreferrer">WebApplicationFactory</a> tooling. <strong>First though, and this is important, you will need to allow your test project access to the internal types of your application under test</strong>. You can do that by either using the <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.internalsvisibletoattribute?view=net-6.0" target="_blank" rel="noopener noreferrer">InternalsVisibleToAttribute</a> in your main application project, or use this within the project file of your application where &quot;ProjectName.Tests&quot; would be your testing project name:</p><div class="language-xml"><pre><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InternalsVisibleTo</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ProjectName.Tests<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>Back to Alba. Alba tries to make the usage of this new configuration option in ASP.Net Core a little easier with this syntax:</p><p><a id="snippet-sample_bootstrapping_with_web_application_factory"></a></p><div class="language-cs"><pre><code><span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">await</span> AlbaHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">For</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">global</span><span class="token punctuation">:</span><span class="token punctuation">:</span>Program<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>x <span class="token operator">=&gt;</span>
<span class="token punctuation">{</span>
    x<span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> services<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        services<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IService<span class="token punctuation">,</span> ServiceA<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Acceptance/web_application_factory_usage.cs#L46-L55" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_bootstrapping_with_web_application_factory" title="Start of snippet">anchor</a></sup></p><p>You&#39;ll need to add the following to your <code>.csproj</code> for <code>Program</code> to be discoverable by the test project:</p><div class="language-xml"><pre><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>InternalsVisibleTo</span> <span class="token attr-name">Include</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ProjectName.Tests<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ItemGroup</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>The <code>AlbaHost.For&lt;T&gt;(Action&lt;WebApplicationFactory&lt;T&gt;&gt; configuration)</code> method uses <code>WebApplicationFactory</code> and all its magic static member trickery to intercept and run the implied <code>Program.Main()</code> method from the sample application above while also allowing you to customize the application configuration at testing time. The &quot;T&quot; in this case is only a marker type so that <code>WebApplicationFactory</code> can choose the correct entry assembly for the web application that is being tested by Alba.</p><p>See <a href="https://andrewlock.net/exploring-dotnet-6-part-6-supporting-integration-tests-with-webapplicationfactory-in-dotnet-6/" target="_blank" rel="noopener noreferrer">this blog post from Andrew Lock on the WebApplicationFactory mechanics</a> for more information.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>AlbaHost</code> is an expensive object to create, so you&#39;ll generally want to reuse it across tests. See the relevant guide for <a href="./xunit.html">xUnit</a> or <a href="./nunit.html">NUnit</a></p></div><h2 id="running-a-scenario" tabindex="-1">Running a Scenario <a class="header-anchor" href="#running-a-scenario" aria-hidden="true">#</a></h2><p>Once you have a <code>AlbaHost</code> object, you&#39;re ready to execute <em>Scenario&#39;s</em> through your system inside of tests. Below is a scenario for the &quot;hello, world&quot; application:</p><p><a id="snippet-sample_should_say_hello_world"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">should_say_hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">await</span> Program
        <span class="token punctuation">.</span><span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        <span class="token comment">// This extension method is just a shorter version</span>
        <span class="token comment">// of new AlbaHost(builder)</span>
        <span class="token punctuation">.</span><span class="token function">StartAlbaAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// This runs an HTTP request and makes an assertion</span>
    <span class="token comment">// about the expected content of the response</span>
    <span class="token keyword">await</span> host<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        _<span class="token punctuation">.</span>Get<span class="token punctuation">.</span><span class="token function">Url</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _<span class="token punctuation">.</span><span class="token function">ContentShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        _<span class="token punctuation">.</span><span class="token function">StatusCodeShouldBeOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/Quickstart.cs#L30-L50" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_should_say_hello_world" title="Start of snippet">anchor</a></sup></p><p>The single <code>Action&lt;Scenario&gt;</code> argument should completely configure the ASP.Net <code>HttpContext</code> for the request and apply any of the declarative response assertions. The actual HTTP request happens inside of the <code>Scenario()</code> method. The response contains the raw <code>HttpContext</code> and several helper methods to help you parse or read information from the response body:</p><p><a id="snippet-sample_iscenarioresult"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IScenarioResult</span>
<span class="token punctuation">{</span>
    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">///     Helpers to interrogate or read the HttpResponse.Body</span>
    <span class="token comment">///     of the request</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token punctuation">[</span><span class="token function">Obsolete</span><span class="token punctuation">(</span><span class="token string">&quot;Use the methods directly on IScenarioResult instead&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token return-type class-name">HttpResponseBody</span> ResponseBody <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">///     The raw HttpContext used during the scenario</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token return-type class-name">HttpContext</span> Context <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// Read the contents of the HttpResponse.Body as text</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token comment">/// &lt;returns&gt;&lt;/returns&gt;</span>
    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ReadAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// Read the contents of the HttpResponse.Body into an XmlDocument object</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token comment">/// &lt;returns&gt;&lt;/returns&gt;</span>
    <span class="token return-type class-name">XmlDocument<span class="token punctuation">?</span></span> <span class="token function">ReadAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// Deserialize the contents of the HttpResponse.Body into an object</span>
    <span class="token comment">/// of type T using the built in XmlSerializer</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token comment">/// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;</span>
    <span class="token comment">/// &lt;returns&gt;&lt;/returns&gt;</span>
    <span class="token return-type class-name">T<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">ReadAsXml</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span><span class="token punctuation">;</span>

    <span class="token comment">/// &lt;summary&gt;</span>
    <span class="token comment">/// Deserialize the contents of the HttpResponse.Body into an object</span>
    <span class="token comment">/// of type T using the configured Json serializer</span>
    <span class="token comment">/// &lt;/summary&gt;</span>
    <span class="token comment">/// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;</span>
    <span class="token comment">/// &lt;returns&gt;&lt;/returns&gt;</span>
    <span class="token return-type class-name">T<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">ReadAsJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token return-type class-name">T<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Read</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba/IScenarioResult.cs#L8-L53" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_iscenarioresult" title="Start of snippet">anchor</a></sup></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Alba v5 makes the old <code>HttpResponseBody</code> obsolete. It&#39;s still there, but the same functionality is readily available on <code>IScenarioResult</code>.</p></div><p>If the existing <em>Scenario</em> assertions aren&#39;t enough to verify your test case, you can work directly against the raw response:</p><p><a id="snippet-sample_should_say_hello_world_with_raw_objects"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">should_say_hello_world_with_raw_objects</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> system <span class="token operator">=</span> AlbaHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ForStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> system<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>
        <span class="token punctuation">{</span>
            _<span class="token punctuation">.</span>Get<span class="token punctuation">.</span><span class="token function">Url</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            _<span class="token punctuation">.</span><span class="token function">StatusCodeShouldBeOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        response<span class="token punctuation">.</span><span class="token function">ReadAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// or you can go straight at the HttpContext</span>
        <span class="token class-name">Stream</span> responseStream <span class="token operator">=</span> response<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body<span class="token punctuation">;</span>
        <span class="token comment">// do assertions directly on the responseStream</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/Quickstart.cs#L88-L108" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_should_say_hello_world_with_raw_objects" title="Start of snippet">anchor</a></sup></p><p>Do note that Alba quietly &quot;rewinds&quot; the <code>HttpContext.Response.Body</code> stream so that you can more readily read and work with the contents.</p><h2 id="customizing-the-system-for-testing" tabindex="-1">Customizing the System for Testing <a class="header-anchor" href="#customizing-the-system-for-testing" aria-hidden="true">#</a></h2><p>If you also want to run real HTTP requests through your system in a test harness, you have more opportunities to configure the underlying <a href="https://docs.microsoft.com/en-us/aspnet/core/api/microsoft.aspnetcore.hosting.iwebhostbuilder" target="_blank" rel="noopener noreferrer">IWebHostBuilder</a> like so:</p><p><a id="snippet-sample_configuration_overrides"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> stubbedWebService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StubbedWebService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">// override the environment if you need to</span>
    <span class="token punctuation">.</span><span class="token function">UseEnvironment</span><span class="token punctuation">(</span><span class="token string">&quot;Testing&quot;</span><span class="token punctuation">)</span>

    <span class="token comment">// override service registrations or internal options if you need to</span>
    <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        s<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IExternalWebService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>stubbedWebService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">PostConfigure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MvcNewtonsoftJsonOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span>
            o<span class="token punctuation">.</span>SerializerSettings<span class="token punctuation">.</span>TypeNameHandling <span class="token operator">=</span> TypeNameHandling<span class="token punctuation">.</span>All<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Create the SystemUnderTest</span>
<span class="token class-name"><span class="token keyword">var</span></span> system <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AlbaHost</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">BeforeEach</span><span class="token punctuation">(</span>httpContext <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// do some data setup or clean up before every single test</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">AfterEach</span><span class="token punctuation">(</span>httpContext <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// do any kind of cleanup after each scenario completes</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/Quickstart.cs#L173-L200" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_configuration_overrides" title="Start of snippet">anchor</a></sup></p><p>A couple notes:</p><ul><li>Alba does not do anything to set the hosting environment, but you can do that yourself against <code>IWebHostBuilder</code></li><li>If you build a <code>AlbaHost</code> with <code>AlbaHost.ForStartup&lt;T&gt;()</code>, it will try to guess at the content root path by the name of assembly that holds the <code>Startup</code> class, but you may need to override that yourself.</li></ul><p>My shop is also using Alba within <a href="http://storyteller.github.io" target="_blank" rel="noopener noreferrer">Storyteller</a> specifications where we use a mix of headless Alba Scenario&#39;s and full HTTP requests for testing.</p>`,59),c=[p];function l(i,u,r,k,d,m){return a(),s("div",null,c)}var b=n(o,[["render",l]]);export{g as __pageData,b as default};
