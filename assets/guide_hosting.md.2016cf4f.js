import{o as n,c as s,a,e as t}from"./app.14495198.js";const e='{"title":"Bootstrapping and Configuration","description":"","frontmatter":{},"headers":[{"level":2,"title":"Initializing AlbaHost","slug":"initializing-albahost"},{"level":2,"title":"Running a Scenario","slug":"running-a-scenario"},{"level":2,"title":"Customizing the System for Testing","slug":"customizing-the-system-for-testing"}],"relativePath":"guide/hosting.md","lastUpdated":1630651362157}',o={},p=t('<h1 id="bootstrapping-and-configuration"><a class="header-anchor" href="#bootstrapping-and-configuration" aria-hidden="true">#</a> Bootstrapping and Configuration</h1><h2 id="initializing-albahost"><a class="header-anchor" href="#initializing-albahost" aria-hidden="true">#</a> Initializing AlbaHost</h2><p>To get started with Alba, just add a Nuget reference to the Alba library to your testing project. In the following sections I&#39;ll show you how to bootstrap your <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core system with Alba and start authoring specifications with the <code>IAlbaHost</code> abstraction.</p><p>To bootstrap and connect any <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> Core application to Alba, create a <code>AlbaHost</code> using the definition of your <code>IHostBuilder</code> as shown below:</p>',4),c=t('<p><a id="snippet-sample_quickstart3"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">build_host_from_Program</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    \n<span class="token punctuation">{</span>\n    <span class="token comment">// Bootstrap your application just as your real application does</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> hostBuilder <span class="token operator">=</span> Program<span class="token punctuation">.</span><span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AlbaHost</span><span class="token punctuation">(</span>hostBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Just as a sample, I&#39;ll run a scenario against</span>\n    <span class="token comment">// a &quot;hello, world&quot; application&#39;s root url</span>\n    <span class="token keyword">await</span> host<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        s<span class="token punctuation">.</span>Get<span class="token punctuation">.</span><span class="token function">Url</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        s<span class="token punctuation">.</span><span class="token function">ContentShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/Quickstart3.cs#L15-L32" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_quickstart3" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>There are both synchronous and asynchronous methods to bootstrap an <code>AlbaHost</code>. Depending on your test harness, I recommend using the asynchronous version whenever applicable.</p></div><p>Or alternatively, you can use one of the Alba extension methods off of <code>IHostBuilder</code> to start an <code>AlbaHost</code> object in a fluent interface style:</p>',5),l=t('<p><a id="snippet-sample_shorthand_bootstrapping"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">fluent_interface_bootstrapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    \n<span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">await</span> Program\n        <span class="token punctuation">.</span><span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">StartAlbaAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Just as a sample, I&#39;ll run a scenario against</span>\n    <span class="token comment">// a &quot;hello, world&quot; application&#39;s root url</span>\n    <span class="token keyword">await</span> host<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        s<span class="token punctuation">.</span>Get<span class="token punctuation">.</span><span class="token function">Url</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        s<span class="token punctuation">.</span><span class="token function">ContentShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/Quickstart3.cs#L35-L51" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_shorthand_bootstrapping" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>The <code>AlbaHost</code> is an extension of the standard .Net Core <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.hosting.ihost?view=dotnet-plat-ext-5.0" target="_blank" rel="noopener noreferrer">IHost</a> interface with a few additions for testing support. While you can always access the underlying <code>TestServer</code> through the <code>IAlbaHost.Server</code> property, you&#39;re mostly going to be using the <code>Scenario()</code> method to write Alba &quot;Scenario&quot; tests.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>To make the samples in this page easier to follow, I&#39;m bootstrapping the <code>IAlbaHost</code> within each test. In real usage, bootstrapping your application is expensive and you will probably want to reuse the <code>IAlbaHost</code> between tests. See the integrations with NUnit and <a href="http://xUnit.Net" target="_blank" rel="noopener noreferrer">xUnit.Net</a> for examples.</p></div><h2 id="running-a-scenario"><a class="header-anchor" href="#running-a-scenario" aria-hidden="true">#</a> Running a Scenario</h2><p>Once you have a <code>AlbaHost</code> object, you&#39;re ready to execute <em>Scenario&#39;s</em> through your system inside of tests. Below is a scenario for the &quot;hello, world&quot; application:</p>',7),u=t('<p><a id="snippet-sample_should_say_hello_world"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">should_say_hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">await</span> <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> host <span class="token operator">=</span> <span class="token keyword">await</span> Program\n        <span class="token punctuation">.</span><span class="token function">CreateHostBuilder</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Empty</span><span class="token generic class-name"><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        \n        <span class="token comment">// This extension method is just a shorter version</span>\n        <span class="token comment">// of new AlbaHost(builder)</span>\n        <span class="token punctuation">.</span><span class="token function">StartAlbaAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \n    <span class="token comment">// This runs an HTTP request and makes an assertion</span>\n    <span class="token comment">// about the expected content of the response</span>\n    <span class="token keyword">await</span> host<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        _<span class="token punctuation">.</span>Get<span class="token punctuation">.</span><span class="token function">Url</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        _<span class="token punctuation">.</span><span class="token function">ContentShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        _<span class="token punctuation">.</span><span class="token function">StatusCodeShouldBeOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/Quickstart.cs#L30-L50" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_should_say_hello_world" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>The single <code>Action&lt;Scenario&gt;</code> argument should completely configure the <a href="http://ASP.Net" target="_blank" rel="noopener noreferrer">ASP.Net</a> <code>HttpContext</code> for the request and apply any of the declarative response assertions. The actual HTTP request happens inside of the <code>Scenario()</code> method. The response contains the raw <code>HttpContext</code> and several helper methods to help you parse or read information from the response body:</p>',4),i=t('<p><a id="snippet-sample_iscenarioresult"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IScenarioResult</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/// &lt;summary&gt;</span>\n    <span class="token comment">///     Helpers to interrogate or read the HttpResponse.Body</span>\n    <span class="token comment">///     of the request</span>\n    <span class="token comment">/// &lt;/summary&gt;</span>\n    <span class="token punctuation">[</span><span class="token function">Obsolete</span><span class="token punctuation">(</span><span class="token string">&quot;Use the methods directly on IScenarioResult instead&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n    <span class="token return-type class-name">HttpResponseBody</span> ResponseBody <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token comment">/// &lt;summary&gt;</span>\n    <span class="token comment">///     The raw HttpContext used during the scenario</span>\n    <span class="token comment">/// &lt;/summary&gt;</span>\n    <span class="token return-type class-name">HttpContext</span> Context <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n    <span class="token comment">/// &lt;summary&gt;</span>\n    <span class="token comment">/// Read the contents of the HttpResponse.Body as text</span>\n    <span class="token comment">/// &lt;/summary&gt;</span>\n    <span class="token comment">/// &lt;returns&gt;&lt;/returns&gt;</span>\n    <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ReadAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/// &lt;summary&gt;</span>\n    <span class="token comment">/// Read the contents of the HttpResponse.Body into an XmlDocument object</span>\n    <span class="token comment">/// &lt;/summary&gt;</span>\n    <span class="token comment">/// &lt;returns&gt;&lt;/returns&gt;</span>\n    <span class="token return-type class-name">XmlDocument<span class="token punctuation">?</span></span> <span class="token function">ReadAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/// &lt;summary&gt;</span>\n    <span class="token comment">/// Deserialize the contents of the HttpResponse.Body into an object</span>\n    <span class="token comment">/// of type T using the built in XmlSerializer</span>\n    <span class="token comment">/// &lt;/summary&gt;</span>\n    <span class="token comment">/// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;</span>\n    <span class="token comment">/// &lt;returns&gt;&lt;/returns&gt;</span>\n    <span class="token return-type class-name">T<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">ReadAsXml</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token keyword">class</span></span><span class="token punctuation">;</span>\n\n    <span class="token comment">/// &lt;summary&gt;</span>\n    <span class="token comment">/// Deserialize the contents of the HttpResponse.Body into an object</span>\n    <span class="token comment">/// of type T using the configured Json serializer</span>\n    <span class="token comment">/// &lt;/summary&gt;</span>\n    <span class="token comment">/// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;</span>\n    <span class="token comment">/// &lt;returns&gt;&lt;/returns&gt;</span>\n    <span class="token return-type class-name">T<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">ReadAsJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token return-type class-name">T<span class="token punctuation">?</span></span> <span class="token generic-method"><span class="token function">Read</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba/IScenarioResult.cs#L8-L53" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_iscenarioresult" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Alba v5 makes the old <code>HttpResponseBody</code> obsolete. It&#39;s still there, but the same functionality is readily available on <code>IScenarioResult</code>.</p></div><p>If the existing <em>Scenario</em> assertions aren&#39;t enough to verify your test case, you can work directly against the raw response:</p>',5),r=t('<p><a id="snippet-sample_should_say_hello_world_with_raw_objects"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">should_say_hello_world_with_raw_objects</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> system <span class="token operator">=</span> AlbaHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ForStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token class-name"><span class="token keyword">var</span></span> response <span class="token operator">=</span> <span class="token keyword">await</span> system<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>\n        <span class="token punctuation">{</span>\n            _<span class="token punctuation">.</span>Get<span class="token punctuation">.</span><span class="token function">Url</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            _<span class="token punctuation">.</span><span class="token function">StatusCodeShouldBeOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        response<span class="token punctuation">.</span><span class="token function">ReadAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">ShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// or you can go straight at the HttpContext</span>\n        <span class="token class-name">Stream</span> responseStream <span class="token operator">=</span> response<span class="token punctuation">.</span>Context<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Body<span class="token punctuation">;</span>\n        <span class="token comment">// do assertions directly on the responseStream</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/Quickstart.cs#L88-L108" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_should_say_hello_world_with_raw_objects" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>Do note that Alba quietly &quot;rewinds&quot; the <code>HttpContext.Response.Body</code> stream so that you can more readily read and work with the contents.</p><h2 id="customizing-the-system-for-testing"><a class="header-anchor" href="#customizing-the-system-for-testing" aria-hidden="true">#</a> Customizing the System for Testing</h2><p>If you also want to run real HTTP requests through your system in a test harness, you have more opportunities to configure the underlying <a href="https://docs.microsoft.com/en-us/aspnet/core/api/microsoft.aspnetcore.hosting.iwebhostbuilder" target="_blank" rel="noopener noreferrer">IWebHostBuilder</a> like so:</p>',6),k=t('<p><a id="snippet-sample_configuration_overrides"></a></p><div class="language-cs"><pre><code><span class="token class-name"><span class="token keyword">var</span></span> stubbedWebService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">StubbedWebService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name"><span class="token keyword">var</span></span> builder <span class="token operator">=</span> Host<span class="token punctuation">.</span><span class="token function">CreateDefaultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">ConfigureWebHostDefaults</span><span class="token punctuation">(</span>c <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">UseStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// override the environment if you need to</span>\n    <span class="token punctuation">.</span><span class="token function">UseEnvironment</span><span class="token punctuation">(</span><span class="token string">&quot;Testing&quot;</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// override service registrations or internal options if you need to</span>\n    <span class="token punctuation">.</span><span class="token function">ConfigureServices</span><span class="token punctuation">(</span>s <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        s<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">AddSingleton</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IExternalWebService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>stubbedWebService<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        s<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">PostConfigure</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MvcNewtonsoftJsonOptions<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>o <span class="token operator">=&gt;</span>\n            o<span class="token punctuation">.</span>SerializerSettings<span class="token punctuation">.</span>TypeNameHandling <span class="token operator">=</span> TypeNameHandling<span class="token punctuation">.</span>All<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create the SystemUnderTest</span>\n<span class="token class-name"><span class="token keyword">var</span></span> system <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AlbaHost</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">BeforeEach</span><span class="token punctuation">(</span>httpContext <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// do some data setup or clean up before every single test</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">AfterEach</span><span class="token punctuation">(</span>httpContext <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// do any kind of cleanup after each scenario completes</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/Quickstart.cs#L173-L200" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_configuration_overrides" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>A couple notes:</p><ul><li>Alba does not do anything to set the hosting environment, but you can do that yourself against <code>IWebHostBuilder</code></li><li>If you build a <code>AlbaHost</code> with <code>AlbaHost.ForStartup&lt;T&gt;()</code>, it will try to guess at the content root path by the name of assembly that holds the <code>Startup</code> class, but you may need to override that yourself.</li></ul><p>My shop is also using Alba within <a href="http://storyteller.github.io" target="_blank" rel="noopener noreferrer">Storyteller</a> specifications where we use a mix of headless Alba Scenario&#39;s and full HTTP requests for testing.</p>',6);o.render=function(t,e,o,d,m,h){return n(),s("div",null,[p,a(" snippet: sample_Quickstart3 "),c,a(" snippet: sample_shorthand_bootstrapping "),l,a(" snippet: sample_should_say_hello_world "),u,a(" snippet: sample_IScenarioResult "),i,a(" snippet: sample_should_say_hello_world_with_raw_objects "),r,a(" snippet: sample_configuration_overrides "),k])};export{e as __pageData,o as default};
