import{_ as s,c as n,o as a,a as t}from"./app.bb080ae4.js";const m='{"title":"Sending and Checking Json","description":"","frontmatter":{},"headers":[{"level":2,"title":"Sending Json","slug":"sending-json"},{"level":2,"title":"Reading Json","slug":"reading-json"},{"level":2,"title":"Shortcut for Pure Json Services","slug":"shortcut-for-pure-json-services"}],"relativePath":"scenarios/json.md","lastUpdated":1644418893206}',p={},e=t(`<h1 id="sending-and-checking-json" tabindex="-1">Sending and Checking Json <a class="header-anchor" href="#sending-and-checking-json" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>As of Alba v5, the Json serialization is done with the configured input and output formatters within the underlying application. This means that Alba can support systems using both System.Text.Json and Newtonsoft.Json.</p></div><h2 id="sending-json" tabindex="-1">Sending Json <a class="header-anchor" href="#sending-json" aria-hidden="true">#</a></h2><p>Since posting Json to a web server API is so common, Alba has some helpers for writing Json to the request:</p><p><a id="snippet-sample_sending_json"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">send_json</span><span class="token punctuation">(</span><span class="token class-name">IAlbaHost</span> host<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> host<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// This serializes the Input object to json,</span>
        <span class="token comment">// writes it to the HttpRequest.Body, and sets</span>
        <span class="token comment">// the accepts &amp; content-type header values to</span>
        <span class="token comment">// application/json</span>
        _<span class="token punctuation">.</span>Post
            <span class="token punctuation">.</span><span class="token function">Json</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">Input</span> <span class="token punctuation">{</span>Name <span class="token operator">=</span> <span class="token string">&quot;Max&quot;</span><span class="token punctuation">,</span> Age <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">ToUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/person&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/JsonAndXml.cs#L10-L24" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_sending_json" title="Start of snippet">anchor</a></sup></p><h2 id="reading-json" tabindex="-1">Reading Json <a class="header-anchor" href="#reading-json" aria-hidden="true">#</a></h2><p>To deserialize the response body with Json to interrogate the results in a strong typed way, use this syntax:</p><p><a id="snippet-sample_read_json"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">read_json</span><span class="token punctuation">(</span><span class="token class-name">IAlbaHost</span> host<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> host<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>
    <span class="token punctuation">{</span>
        _<span class="token punctuation">.</span>Get<span class="token punctuation">.</span><span class="token function">Url</span><span class="token punctuation">(</span><span class="token string">&quot;/output&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// This deserializes the response body to the</span>
    <span class="token comment">// designated Output type</span>
    <span class="token class-name"><span class="token keyword">var</span></span> output <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ReadAsJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Output<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// do assertions against the Output model</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/JsonAndXml.cs#L46-L60" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_read_json" title="Start of snippet">anchor</a></sup></p><p>You can also use a shorthand syntax to skip <code>Scenario()</code> like this:</p><p><a id="snippet-sample_read_json_shorthand"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">read_json_shorthand</span><span class="token punctuation">(</span><span class="token class-name">IAlbaHost</span> host<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token class-name"><span class="token keyword">var</span></span> output <span class="token operator">=</span> <span class="token keyword">await</span> host<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetAsJson</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Output<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;/output&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// do assertions against the Output model</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/JsonAndXml.cs#L62-L69" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_read_json_shorthand" title="Start of snippet">anchor</a></sup></p><p>This code snippet is functionally identical to the previous usage.</p><h2 id="shortcut-for-pure-json-services" tabindex="-1">Shortcut for Pure Json Services <a class="header-anchor" href="#shortcut-for-pure-json-services" aria-hidden="true">#</a></h2><p>If you don&#39;t care about any additional HTTP headers or need to verify any HTTP status code except for <code>200 Ok</code>, you can use this shorthand syntax to quickly post and receive results from a web service:</p><p><a id="snippet-sample_post_json_get_json"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>
<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">post_and_expect_response</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name"><span class="token keyword">var</span></span> system <span class="token operator">=</span> AlbaHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ForStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>WebApp<span class="token punctuation">.</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name"><span class="token keyword">var</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">OperationRequest</span>
    <span class="token punctuation">{</span>
        Type <span class="token operator">=</span> OperationType<span class="token punctuation">.</span>Multiply<span class="token punctuation">,</span>
        One <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
        Two <span class="token operator">=</span> <span class="token number">4</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name"><span class="token keyword">var</span></span> result <span class="token operator">=</span> <span class="token keyword">await</span> system<span class="token punctuation">.</span><span class="token function">PostJson</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">&quot;/math&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Receive</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>OperationResult<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    result<span class="token punctuation">.</span>Answer<span class="token punctuation">.</span><span class="token function">ShouldBe</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">ShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/using_json_helpers.cs#L36-L54" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_post_json_get_json" title="Start of snippet">anchor</a></sup></p><p>There are similar helpers for other HTTP verbs like <code>PUT</code> and <code>DELETE</code>.</p>`,23),o=[e];function c(u,l,i,r,k,d){return a(),n("div",null,o)}var g=s(p,[["render",c]]);export{m as __pageData,g as default};
