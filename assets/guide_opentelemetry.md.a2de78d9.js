import{_ as e,c as t,o as a,a as i}from"./app.ad1af933.js";const n="/alba/tracing.png",_=JSON.parse('{"title":"Tracing & Open Telemetry","description":"","frontmatter":{},"headers":[{"level":2,"title":"Automated Instrumentation","slug":"automated-instrumentation","link":"#automated-instrumentation","children":[{"level":3,"title":"Datadog CI Visibility","slug":"datadog-ci-visibility","link":"#datadog-ci-visibility","children":[]}]},{"level":2,"title":"Manual Instrumentation","slug":"manual-instrumentation","link":"#manual-instrumentation","children":[{"level":3,"title":"xUnit","slug":"xunit","link":"#xunit","children":[]}]}],"relativePath":"guide/opentelemetry.md"}'),r={name:"guide/opentelemetry.md"},o=i('<h1 id="tracing-open-telemetry" tabindex="-1">Tracing &amp; Open Telemetry <a class="header-anchor" href="#tracing-open-telemetry" aria-hidden="true">#</a></h1><p>Performing distributed tracing within your CI pipline is a relatively new yet powerful concept that can improve your teams response to broken, flaky or slow-performing tests. Alba has support for Open Telemetry tracing within <code>Scenario</code> calls, permitting tracing within your test pipeline with any compatible OpenTelemetry integration. If you believe there&#39;s value in tracing additional areas of Alba, please let us know!</p><h2 id="automated-instrumentation" tabindex="-1">Automated Instrumentation <a class="header-anchor" href="#automated-instrumentation" aria-hidden="true">#</a></h2><h3 id="datadog-ci-visibility" tabindex="-1">Datadog CI Visibility <a class="header-anchor" href="#datadog-ci-visibility" aria-hidden="true">#</a></h3><p><img src="'+n+'" alt="Datadog Tracing"></p><p>Datadog&#39;s CI Visibility feature is compatible with Alba, however you must be using DD .NET Tracer 2.24+ and have <code>DD_TRACE_OTEL_ENABLED</code> set to <code>true</code>. See the <a href="https://docs.datadoghq.com/continuous_integration/tests/dotnet/" target="_blank" rel="noreferrer">documentation</a> for setup information.</p><h2 id="manual-instrumentation" tabindex="-1">Manual Instrumentation <a class="header-anchor" href="#manual-instrumentation" aria-hidden="true">#</a></h2><h3 id="xunit" tabindex="-1">xUnit <a class="header-anchor" href="#xunit" aria-hidden="true">#</a></h3><p>Manually instrumenting your tests requires a moderate amount of supporting code to work correctly. See this <a href="https://github.com/martinjt/unittest-with-otel" target="_blank" rel="noreferrer">repository</a> and related <a href="https://www.honeycomb.io/blog/monitoring-unit-tests-opentelemetry" target="_blank" rel="noreferrer">guide</a> by the team at Honeycomb.io as a starting point.</p>',9),s=[o];function l(d,c,u,m,h,p){return a(),t("div",null,s)}const y=e(r,[["render",l]]);export{_ as __pageData,y as default};
