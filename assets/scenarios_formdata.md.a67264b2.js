import{o as n,c as s,a,b as t,d as p}from"./app.144e7b1a.js";const o='{"title":"","description":"","frontmatter":"title:Sending Http Form Data editLink:true","relativePath":"scenarios/formdata.md","lastUpdated":1629228318248}',e={},c=t("p",null,"Posting HTTP form data in the request can be done with the extension method shown below:",-1),u=p('<p><a id="snippet-sample_write_form_data"></a></p><div class="language-cs"><pre><code><span class="token keyword">public</span> <span class="token return-type class-name">Task</span> <span class="token function">write_form_data</span><span class="token punctuation">(</span><span class="token class-name">IAlbaHost</span> system<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name"><span class="token keyword">var</span></span> form1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">&gt;</span></span>\n    <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;what?&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;now?&quot;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">[</span><span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;really?&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> system<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">// This writes the dictionary values to the HTTP</span>\n        <span class="token comment">// request as form data, and sets the content-length</span>\n        <span class="token comment">// header as well as setting the content-type</span>\n        <span class="token comment">// header to application/x-www-form-urlencoded</span>\n        _<span class="token punctuation">.</span><span class="token function">WriteFormData</span><span class="token punctuation">(</span>form1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Samples/FormData.cs#L8-L27" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_write_form_data" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>There&#39;s a second overload that attempts to use an object and its properties to populate the form data:</p>',4),l=p('<p><a id="snippet-sample_binding_against_a_model"></a></p><div class="language-cs"><pre><code><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">Fact</span></span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token return-type class-name">Task</span> <span class="token function">can_bind_to_form_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\n    <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> system <span class="token operator">=</span> AlbaHost<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">ForStartup</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Startup<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n\n        <span class="token class-name"><span class="token keyword">var</span></span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">InputModel</span> <span class="token punctuation">{</span>\n            One <span class="token operator">=</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>\n            Two <span class="token operator">=</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span>\n            Three <span class="token operator">=</span> <span class="token string">&quot;three&quot;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">await</span> system<span class="token punctuation">.</span><span class="token function">Scenario</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span>\n        <span class="token punctuation">{</span>\n            _<span class="token punctuation">.</span>Post<span class="token punctuation">.</span><span class="token function">FormData</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">ToUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/gateway/insert&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        GatewayController<span class="token punctuation">.</span>LastInput<span class="token punctuation">.</span><span class="token function">ShouldNotBeNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        GatewayController<span class="token punctuation">.</span>LastInput<span class="token punctuation">.</span>One<span class="token punctuation">.</span><span class="token function">ShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        GatewayController<span class="token punctuation">.</span>LastInput<span class="token punctuation">.</span>Two<span class="token punctuation">.</span><span class="token function">ShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        GatewayController<span class="token punctuation">.</span>LastInput<span class="token punctuation">.</span>Three<span class="token punctuation">.</span><span class="token function">ShouldBe</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><sup><a href="https://github.com/JasperFx/alba/blob/master/src/Alba.Testing/Acceptance/data_binding_in_mvc_app.cs#L12-L41" title="Snippet source file">snippet source</a> | <a href="#snippet-sample_binding_against_a_model" title="Start of snippet">anchor</a></sup>\x3c!-- endSnippet --\x3e</p><p>Do note that this only adds first level properties, so if you need to deeper accessors like add &quot;Prop1.Prop2.Prop3,&quot; you&#39;ll have to resort to the dictionary approach.</p>',4);e.render=function(t,p,o,e,i,k){return n(),s("div",null,[c,a(" snippet: sample_write_form_data "),u,a(" snippet: sample_binding_against_a_model "),l])};export{o as __pageData,e as default};
